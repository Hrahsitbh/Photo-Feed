{"version":3,"sources":["API.js","component/Image.js","component/MyModal.js","App.js","serviceWorker.js","index.js"],"names":["API","axios","create","baseURL","header","Accept","params","client_id","process","Image","props","imageSrc","altText","showImageModal","index","className","onClick","src","alt","MyModal","this","size","backdrop","hideHandler","showModal","headerTitle","keyboard","dialogClassName","keyboardVal","Modal","bsSize","show","onHide","Header","closeButton","Title","Body","children","PureComponent","pageNum","App","useState","imagesArray","setImages","modalImg","setModalImg","showModalImg","showSelectedImage","fetchImages","pageNumber","get","page","then","res","data","catch","err","console","log","useCallback","idx","updateImg","type","newImgIndex","length","useEffect","pageStart","loadMore","hasMore","breakpointCols","default","1200","992","768","576","columnClassName","map","item","key","urls","thumb","alt_description","aria-label","class","aria-hidden","small","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e2c71721.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API = axios.create({\n    baseURL: 'https://api.unsplash.com/photos',\n    header: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n       'X-Ratelimit-Limit': 1000\n    },\n    params: {\n      client_id: process.env.REACT_APP_UNSPLASH_API_KEY\n    }\n});\n\nexport default API;\n","import React from 'react';\n\nfunction Image(props) {\n    const { imageSrc, altText, showImageModal, index } = props;\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n                <div className=\"rounded-lg overflow-hidden px-0\" onClick={() => showImageModal(index)}>\n                    <img src={imageSrc} alt={altText} className=\"img-fluid\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Image;","import React, { PureComponent } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport './Modal.scss';\n\nclass MyModal extends PureComponent {\n    static propTypes = {\n        size: PropTypes.string,\n        backdrop: PropTypes.any,\n        hideHandler: PropTypes.func,\n    }\n\n    render() {\n        const { size, backdrop, hideHandler, showModal, headerTitle, keyboard } = this.props;\n        let { dialogClassName } = this.props;\n        dialogClassName = dialogClassName || 'myModal';\n        const keyboardVal = keyboard || false;\n        return (\n            <div className=\"static-modal\">\n                <Modal bsSize={size} backdrop={backdrop} keyboard={keyboardVal} show={showModal} dialogClassName={dialogClassName} onHide={() => hideHandler()}>\n                    {headerTitle && <Modal.Header closeButton>\n                        <Modal.Title>\n                            {headerTitle}\n                        </Modal.Title>\n                    </Modal.Header>}\n                    <Modal.Body>\n                        {this.props.children}\n                    </Modal.Body>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default MyModal;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport API from './API';\nimport './App.scss';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Masonry from 'react-masonry-css';\nimport Image from './component/Image';\nimport MyModal from './component/MyModal';\n\nlet pageNum = 1;\n\nfunction App() {\n  const [imagesArray, setImages] = useState([]);\n  const [modalImg, setModalImg] = useState(null);\n  const [showModalImg, showSelectedImage] = useState(false);\n\n  const fetchImages = pageNumber => {\n    API.get(\"/\", { params: { page: pageNumber } }).then(res => {\n      setImages([...imagesArray, ...res.data]);\n    }).catch(err => console.log(err));\n  }\n\n  const showImageModal = useCallback((idx) => {\n    setModalImg(idx);\n    showSelectedImage(!showModalImg);\n  }, [showModalImg]);\n  \n  const updateImg = type => {\n    let newImgIndex = 0;\n    if (type === 'prev' && modalImg > 0) newImgIndex = modalImg - 1;\n    else if (type === 'next' && modalImg <= imagesArray.length) newImgIndex = modalImg + 1;\n    setModalImg(newImgIndex);\n  };\n\n  useEffect(() => {\n    fetchImages(pageNum);\n  }, []); // eslint-disable-line\n\n  const breakPointsColObj = {\n    default: 6,\n    1200: 3,\n    992: 3,\n    768: 2,\n    576: 1\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"feed-header\">\n        React Photo feed\n      </header>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12 margin-top-100\">\n            <InfiniteScroll pageStart={0} loadMore={() => { fetchImages(pageNum++) }} hasMore={true}>\n              <Masonry breakpointCols={breakPointsColObj} className=\"masonry-grid\" columnClassName=\"masonry-grid_column\">\n                {\n                  imagesArray.length && imagesArray.map((item, index) => {\n                    return (\n                      <Image key={index} index={index} imageSrc={item.urls.thumb} altText={item.alt_description} showImageModal={showImageModal} />\n                    );\n                  })\n                }\n              </Masonry>\n            </InfiniteScroll>\n          </div>\n        </div>\n        {\n          (showModalImg || modalImg < 0) &&\n          <MyModal\n            showModal={showModalImg}\n            hideHandler={showImageModal}\n            dialogClassName=\"myModal\"\n            size=\"lg\"\n            keyboard\n          >\n            <div>\n              <button aria-label=\"Close Modal Icon\" className=\"close\" type=\"button\" onClick={showImageModal}>\n                <span>Ã—</span>\n              </button>\n            </div>\n            <div className=\"display-flex\">\n              <div className=\"nav-btns\"><button onClick={() => updateImg('prev')}><i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i></button></div>\n              <img src={imagesArray[modalImg]?.urls?.small} alt=\"img\" />\n              <div className=\"nav-btns\"><button onClick={() => updateImg('next')}><i class=\"fa fa-arrow-right\" aria-hidden=\"true\"></i></button></div>\n            </div>\n          </MyModal>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}